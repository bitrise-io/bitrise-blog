const Category = (props) => {
	return (
		<a href={props.data.path} title={props.data.name} className="category" >{props.data.name}</a>
	);
}

class Categories extends React.Component {
	constructor() {
		super();
		this.state = {
			dropDownOpened: false,
		}
	}

	componentDidMount() {
		$("#searchKeyWord").keydown(function(e){
			if(e.keyCode == 13) {
				window.location = `/posts/search?query=${$("#searchKeyWord").val()}`;
			}
		});
	}

	onSelectCategory() {
		const dropDownOpened = !this.state.dropDownOpened;
		this.setState({dropDownOpened});
	}

	render() {
		const categories = this.props.categories.map((categoryData) => {
			const category = (
				<Category data={categoryData} />
			);
			return (
				category
			);
		});

		return (
			<% environment.context_class.instance_eval { include ApplicationHelper } %>
			<div className="categories">
				<div className={this.state.dropDownOpened ? "content-wrapper opened" : "content-wrapper"}>
					<a href="/" title="Home" className="category home" >
						<%= svg('home_button') %>
						<span>Home</span>
					</a>
					{categories}
					<div className="search-container">
						<div className="search-wrapper">
							<%= svg('search') %>
							<input id="searchKeyWord" type="text" placeholder="Search articles" />
						</div>
					</div>
					<button className="category-select" onClick={() => this.onSelectCategory()}>select category...</button>
				</div>
			</div>
		);
	}
}